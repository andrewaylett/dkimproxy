Testing:
 - test what happens if DNS is unavailable when fetching key or domain policy
 - use "torture tests" from domainkeys.sourceforge.net to test canonicalization

Desired features:
 - sign/verify a message without having to read it completely into memory
     - Digest::SHA1 can generate the digest incrementally, but I still
       need a way to sign/verify the digest
     - Crypt::OpenSSL::RSA cannot, as far as I can tell, accept an already
       computed digest when doing a sign/verify
     - Crypt::RSA provides the necessary primitives, but so far I haven't
       been able to load a private key with it

Bugs:
 - dkimfilter.in exits after a while, saying "Alarm clock"

Possible bugs:
 - the Mail::DomainKeys module frequently makes assumptions that it's in
   a Unix environment ... e.g. it uses "\r\n" where it should use "\015\012"
   (see perlport(1)'s discussion of Newlines)
 - smtpprox does the same thing, so maybe it's not an issue
 - check header parsing algorithm in Mail::DomainKeys::Message, as it may
   not do the right thing when headers are in the wrong order or duplicate
   headers occur
 - h= tag in signature header contains multiple occurrences of same header
   name
 - if signature fails on an email using a subdomain of the key's domain,
   policy lookup should be for key's domain, not sender domain (i.e.
   sender domain should only be used if the key domain doesn't match,
   or there is no signature)
 - message parse error occurs on headers without colons

Possibly desired features:
 - support use of multiple selectors, multiple private keys
   (the signing process would use a lookup table of some sort, using the
   sender address's domain to pick a selector and a key to use)
 - sign/verify in the same program - although...
     - messages coming from within the organization should be signed
     - messages coming from outside should be verified
   having one program do both actions requires it to know which way the
   message is going, a decision I don't want to be responsible for

DKIM support:
 - verifier
     - allow more control over selecting which signature to use
     - allow more control over handling non-passing DKIM messages
       (i.e. look up the sender policy and apply)
     - allow more control over handling passing DKIM messages
       (i.e. use a pluggable reputation system)
     - it may be possible to distinguish between a RSA sig. failure 
       and a change in message digest... if so, it could be reported
       in the verification results
 - signer
     - add l=, t=, z= tags
	 - provide configurable way to add i= (identity) tag
	 - provide configurable way to add x= (expiration) tag
	 - add header-wrapping to signature before signing
 - filters
     - determine way to indicate what headers should be removed
 - Mail::DKIM::Signature
     - implement method for getting/setting the copied header fields (z=)
       tag

DKIM testing:
 - test public key errors:
   - DNS timeout
   - NXDOMAIN
   - SERVFAIL
   - syntax error in public key record
 - test DNS timeout for signing policy
 - test signature options:
   - unspecified query type
   - query type of "dns/"
   - bad query type
   - bad algorithm
   - unspecified algorithm
   - bad canonicalization
   - unspecified canonicalization
   - test presence of version tag in signature
