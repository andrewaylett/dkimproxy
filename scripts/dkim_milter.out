#!/usr/bin/perl -I../lib
#
# This file is part of DKIMproxy, an SMTP-proxy implementing DKIM.
# Copyright (c) 2006 Messiah College.
# Written by Jason Long <jlong@messiah.edu>.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA  02110-1301, USA.
#

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

$| = 1;
use Sendmail::Milter 0.19;
use Socket;
use Mail::DKIM::Signer;
use Error ":try";

my $keyfile;
my $selector;
my $domain_arg;
my $method = "relaxed";
my $debug;
my $help;
GetOptions(
		"keyfile=s" => \$keyfile,
		"selector=s" => \$selector,
		"domain=s" => \$domain_arg,
		"method=s" => \$method,
		"debug=i" => \$debug,
		"help|?" => \$help)
	or pod2usage(2);
pod2usage(1) if $help;
pod2usage("Error: one or more required arguments are missing")
		unless @ARGV >= 1 && @ARGV <= 2;

#
# check arguments
#

unless (defined $keyfile)
{
	pod2usage("Error: no keyfile specified");
}
unless (-r $keyfile)
{
	pod2usage("Error: cannot read keyfile $keyfile");
}
unless (defined $selector)
{
	pod2usage("Error: selector not specified");
}
unless (defined $domain_arg)
{
	pod2usage("Error: domain not specified");
}
my @domains = split(/,\s*/, $domain_arg);
unless ($method eq "nowsp" || $method eq "simple" || $method eq "relaxed")
{
	die "Error: invalid method $method\n";
}

sub DKIM_ERROR
{
	return SMFIS_ACCEPT;
}

#
# these are the Milter callbacks
#

sub envfrom_callback
{
	my $ctx = shift;
	my @args = @_;
	my $message = "";

	print "my_envfrom:\n";
	print "   + args: '" . join(', ', @args) . "'\n";

	eval
	{
		my $dkim = Mail::DKIM::Signer->new_object(
				Policy => "MySignerPolicy",
				KeyFile => $keyfile,
				Method => $method,
				Selector => $selector,
				);
		$ctx->setpriv($dkim);
		print "   + DKIM signer object allocated.\n";
	};
	if ($@)
	{
		my $E = $@;
		print "   ! error allocating DKIM: $E\n";
		$ctx->setpriv(undef);
		return DKIM_ERROR;
	}


	print "   + callback completed.\n";

	return SMFIS_CONTINUE;
}

sub header_callback
{
	my $ctx = shift;
	my $headerf = shift;
	my $headerv = shift;

	print "my_header:\n";
	print "   + field: '$headerf'\n";
	print "   + value: '$headerv'\n";

	my $dkim = $ctx->getpriv()
		or return DKIM_ERROR;

	eval
	{
		# fix line-endings
		$headerv =~ s#\015##g;
		$headerv =~ s#\012#\015\012#g;
		my $str = "$headerf: $headerv\015\012";
		$dkim->PRINT($str);
		print "   + processed header '$headerf'\n";
		$ctx->setpriv($dkim);
	};
	if ($@)
	{
		my $E = $@;
		print "   ! error processing header: $E\n";
		$ctx->setpriv(undef);
		return DKIM_ERROR;
	}

	print "   + callback completed.\n";

	return SMFIS_CONTINUE;
}

sub eoh_callback
{
	my $ctx = shift;

	print "my_eoh:\n";

	my $dkim = $ctx->getpriv()
		or return DKIM_ERROR;

	eval
	{
		my $str = "\015\012";
		$dkim->PRINT($str);
		print "   + processed end-of-header\n";
		$ctx->setpriv($dkim);
	};
	if ($@)
	{
		my $E = $@;
		print "   ! error processing end-of-header: $E\n";
		$ctx->setpriv(undef);
		return DKIM_ERROR;
	}

	print "   + callback completed.\n";

	return SMFIS_CONTINUE;
}

sub body_callback
{
	my $ctx = shift;
	my $body_chunk = shift;
	my $len = shift;

	# Note: You don't need $len to have a good time.
	# But it's there if you like.

	print "my_body:\n";
	print "   + chunk len: $len\n";
	print "   + processing '$body_chunk'\n";

	my $dkim = $ctx->getpriv()
		or return DKIM_ERROR;

	eval
	{
		$dkim->PRINT($body_chunk);
		$ctx->setpriv($dkim);
	};
	if ($@)
	{
		my $E = $@;
		print "   ! error processing body: $E\n";
		$ctx->setpriv(undef);
		return DKIM_ERROR;
	}

	print "   + callback completed.\n";

	return SMFIS_CONTINUE;
}

sub eom_callback
{
	my $ctx = shift;

	print "my_eom:\n";

	my $dkim = $ctx->getpriv()
		or return DKIM_ERROR;

	eval
	{
		$dkim->CLOSE;
		if ($dkim->signature)
		{
			my $dkim_signature = $dkim->signature->as_string;
			my ($field, $value) = split(/: /, $dkim_signature, 2);
			$ctx->insheader(0, $field, $value);
			print "   + DKIM signature header prepended.\n";
		}
		else
		{
			print "   + no signature generated.\n";
		}
	};
	if ($@)
	{
		my $E = $@;
		print "   ! error generating signature: $E\n";
		return DKIM_ERROR;
	}

	$ctx->setpriv(undef);
	print "   + private data cleared.\n";

	print "   + callback completed.\n";

	return SMFIS_CONTINUE;
}

sub abort_callback
{
	my $ctx = shift;

	print "my_abort:\n";

	$ctx->setpriv(undef);
	print "   + private data cleared.\n";

	print "   + callback completed.\n";

	return SMFIS_CONTINUE;
}

my %my_callbacks =
(
	'envfrom' =>	\&envfrom_callback,
	'header' =>	\&header_callback,
	'eoh' =>	\&eoh_callback,
	'body' =>	\&body_callback,
	'eom' =>	\&eom_callback,
	'abort' =>	\&abort_callback,
);

#BEGIN:
#{
	my $conn;
	if (@ARGV == 1)
	{
		$conn = $ARGV[0];
	}
	elsif (@ARGV == 2)
	{
		if (-f $ARGV[1])
		{
			$conn = Sendmail::Milter::auto_getconn($ARGV[0], $ARGV[1]);
			print "Found connection info for '$ARGV[0]': $conn\n";
		}
		else
		{
			$conn = $ARGV[1];
		}
	}
	else
	{
		print "Usage:\n";
		print " perl $0 <name_of_filter> <path_to_sendmail.cf>\n";
		print " perl $0 <name_of_filter> <connection_string>\n";
		print " perl $0 <connection_string>\n";
		exit;
	}

	if ($conn =~ /^local:(.+)$/)
	{
		my $unix_socket = $1;

		if (-e $unix_socket)
		{
			print "Attempting to unlink UNIX socket '$conn' ... ";

			if (unlink($unix_socket) == 0)
			{
				print "failed.\n";
				exit;
			}
			print "successful.\n";
		}
	}

	if (not Sendmail::Milter::setconn($conn))
	{
		print "Failed to detect connection information.\n";
		exit;
	}

	#
	#  The flags parameter is optional. SMFI_CURR_ACTS sets all of the
	#  current version's filtering capabilities.
	#
	#  %Sendmail::Milter::DEFAULT_CALLBACKS is provided for you in getting
	#  up to speed quickly. I highly recommend creating a callback table
	#  of your own with only the callbacks that you need.
	#

	if (not Sendmail::Milter::register($ARGV[0], \%my_callbacks,
		SMFIF_ADDHDRS))
	{
		print "Failed to register callbacks for $ARGV[0].\n";
		exit;
	}

	if ($debug)
	{
		Sendmail::Milter::setdbg($debug);
	}

	print "Starting Sendmail::Milter $Sendmail::Milter::VERSION engine.\n";

	if (Sendmail::Milter::main())
	{
		print "Successful exit from the Sendmail::Milter engine.\n";
	}
	else
	{
		print "Unsuccessful exit from the Sendmail::Milter engine.\n";
	}
#}

package MySignerPolicy;
use Mail::DKIM::SignerPolicy;
use base "Mail::DKIM::SignerPolicy";

sub apply
{
	my ($self, $signer) = @_;

	# determine what domain to use
	my $domain;
	if ($domain = lc $signer->message_sender->host)
	{
		while ($domain)
		{
			if (grep { lc($_) eq $domain } @domains)
			{
				$signer->domain($domain);
				return 1;
			}
			# try the parent domain
			(undef, $domain) = split(/\./, $domain, 2);
		}
	}

	# unable to match a sender domain
	return undef;
}

__END__

=head1 NAME

dkim_milter.out - Milter for adding DKIM signatures to email

=head1 SYNOPSIS

  dkim_milter.out [options] --keyfile=FILENAME --selector=SELECTOR \
                 --domain=DOMAIN milter_name connection_info
    options:
      --method=simple|nowsp|relaxed

  dkim_milter.out --help
    to see a full description of the various options

=cut
