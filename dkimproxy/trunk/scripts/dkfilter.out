#!/usr/bin/perl -I../lib
#
# Copyright (c) 2005 Messiah College. This program is free software.
# You can redistribute it and/or modify it under the terms of the
# GNU Public License as found at http://www.fsf.org/copyleft/gpl.html.
#

#
#   This code is Copyright (C) 2001 Morgan Stanley Dean Witter, and
#   is distributed according to the terms of the GNU Public License
#   as found at <URL:http://www.fsf.org/copyleft/gpl.html>.
#
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
# Written by Bennett Todd <bet@rahul.net>

use strict;
use Getopt::Long;
use IO::File;

use MSDW::SMTP::Server;
use MSDW::SMTP::Client;
use Sys::Syslog;
use DKMessage;

use Sys::Hostname;
my $hostname = hostname;
my $syntax = "syntax: $0 [--children=16] [--minperchild=100] ".
             "[--maxperchild=200] [--debugtrace=undef] ".
			 "[--reject-fail] [--reject-error] [--hostname=$hostname] " .
			 "--keyfile=KEYFILE --selector=SELECTOR --domain=DOMAIN " .
			 "[--method=simple|nofws] " .
             "listen.addr:port talk.addr:port\n";

my $children = 16;
my $minperchild = 100;
my $maxperchild = 200;
my $reject_fail = 0;  # not actually used in this filter
my $reject_error = 0;
my $keyfile;
my $selector;
my $domain_arg;
my $method = "simple";
my $headers = 0;
my $debugtrace = undef;
GetOptions("children=n" => \$children,
	   "minperchild=n" => \$minperchild,
	   "maxperchild=n" => \$maxperchild,
	   "reject-fail" => \$reject_fail,
	   "reject-error" => \$reject_error,
	   "hostname=s" => \$hostname,
	   "keyfile=s" => \$keyfile,
	   "selector=s" => \$selector,
	   "domain=s" => \$domain_arg,
	   "method=s" => \$method,
	   "headers" => \$headers,
	   "debugtrace=s" => \$debugtrace) or die $syntax;

die $syntax unless @ARGV == 2;
my ($srcaddr, $srcport) = split /:/, $ARGV[0];
my ($dstaddr, $dstport) = split /:/, $ARGV[1];
die $syntax unless defined($srcport) and defined($dstport);

unless (defined $keyfile)
{
	print STDERR "Error: no keyfile specified\n";
	die $syntax;
}
unless (-r $keyfile)
{
	die "Error: can't read keyfile $keyfile\n";
}
unless (defined $selector)
{
	print STDERR "Error: selector not specified\n";
	die $syntax;
}
unless (defined $domain_arg)
{
	print STDERR "Error: domain not specified\n";
	die $syntax;
}
my @domains = split(/,\s*/, $domain_arg);
unless ($method eq "simple" || $method eq "nofws")
{
	die "Error: invalid method; must be simple or nofws\n";
}


my $server = MSDW::SMTP::Server->new(interface => $srcaddr, port => $srcport);

# This should allow a kill on the parent to also blow away the
# children, I hope
my %children;
use vars qw($please_die);
$please_die = 0;
$SIG{TERM} = sub { $please_die = 1; die "got TERM signal"; };

# catch exception thrown by TERM signal handler
eval
{
	# This block is the parent daemon, never does an accept, just herds
	# a pool of children who accept and service connections, and
	# occasionally kill themselves off
	PARENT: while (1)
	{
		while (scalar(keys %children) >= $children)
		{
			# wait for a child process to exit
			my $child = wait;
			delete $children{$child} if exists $children{$child};
		}
		# start a new child process
		my $pid = fork;
		die "$0: fork failed: $!\n" unless defined $pid;
		last PARENT if $pid == 0;
		$children{$pid} = 1;
		select(undef, undef, undef, 0.1);
	}
}; # end eval

$SIG{TERM} = 'DEFAULT';
if ($please_die)
{
	kill 15, keys %children;
	exit 0;
}
# This block is a child service daemon. It inherited the bound
# socket created by SMTP::Server->new, it will service a random
# number of connection requests in [minperchild..maxperchild] then
# exit

my $lives = $minperchild + (rand($maxperchild - $minperchild));
my %opts;
if (defined $debugtrace) {
	$opts{debug} = IO::File->new(">$debugtrace.$$");
	$opts{debug}->autoflush(1);
}

# initialize syslog
openlog("dkfilter.out", "cons,pid", "mail");

while (1) {
    $server->accept(%opts);
    my $client = MSDW::SMTP::Client->new(interface => $dstaddr, port => $dstport);
    my $banner = $client->hear;
    $banner = "220 $debugtrace.$$" if defined $debugtrace;
    $server->ok($banner);
    while (my $what = $server->chat) {
		if ($what eq '.') {
			unless (handle_end_of_data($server, $client))
			{
				# TODO - explicitly close the connection to the next server
				last;
			}
		} else {
	    	$client->say($what);
		}
		$server->ok($client->hear);
    }
    $client = undef;
    delete $server->{"s"};
    exit 0 if $lives-- <= 0;
}

# handle_end_of_data
#
# Called when the source finishes transmitting the message. This method
# may filter the message and if desired, transmit the message to
# $client. Alternatively, this method can respond to the server with
# some sort of rejection (temporary or permanent).
#
# Usage: $result = handle_end_of_data($server, $client);
#
# Returns:
#   nonzero if a message was transmitted to the next server and its response
#     returned to the source server
#   zero if the message was rejected and the connection to the next server
#     should be dropped
#
sub handle_end_of_data
{
	my ($server, $client) = @_;

	my $fh = $server->{data};
	my $mess;
	my $result;
	my $result_detail;
	eval
	{
		$mess = DKMessage->new_from_handle($fh);

		# determine what domain to use
		my $domain;
		if ($domain = lc $mess->senderdomain)
		{
			while ($domain)
			{
				if (grep { lc($_) eq $domain } @domains)
				{
					last;
				}
				# try the parent domain
				(undef, $domain) = split(/\./, $domain, 2);
			}
		}
		unless ($domain)
		{
			# message has no senderdomain
			$domain = $domains[0];
		}

		$result = $mess->sign(
			Method => $method,
			Selector => $selector,
			Domain => $domain,
			KeyFile => $keyfile,
			Headers => $headers
			);
		$result_detail = $mess->result_detail;

		syslog("info", '%s',
			"DomainKeys signing - $result_detail; "
			. join(", ", $mess->info));
	};
	if ($@)
	{
		my $E = $@;
		chomp $E;
		syslog("warning", '%s', "signing error: $E");
		$result = "temperror";
		$result_detail = "$result ($E)";
	}

	# check signing result
	if ($result =~ /error$/ && $reject_error)
	{
		# temporary or permanent error
		$server->fail(
			($result eq "permerror" ? "550" : "450")
			. " DomainKeys - $result_detail");
		return 0;
	}

	$fh->seek(0,0);

	if ($mess)
	{
		# send the message as modified by the verification process
		while (my $line = $mess->readline)
		{
			$client->write_data_line($line);
			#DEBUGGING:
			#$line =~ s/[\015\012]+$//;
			#print "--> $line\n";
		}
		$client->{sock}->print(".\015\012")
			or die "write error: $!";
	}
	else
	{
		# send the message unaltered
		$client->yammer($fh);
	}
	return 1;
}

__END__

=head1 NAME

  dkfilter.out -- SMTP proxy for DomainKeys signing

=head1 SYNOPSIS

  dkfilter.out [options] listen.addr:port talk.addr:port
    options:
      --children=16
      --minperchild=100
      --maxperchild=200
      --debugtrace=filename_prefix
      --reject-error
      --keyfile=filename
      --selector=SELECTOR
      --domain=DOMAIN
      --method=simple|nofws
      --headers

=head1 DESCRIPTION

dkfilter.out listens on the addr and port specified by its first arg,
and sends the traffic mostly unmodified to the SMTP server whose addr and
port are listed as its second arg. The SMTP protocol is propogated
literally, but message bodies are conditionally signed with the specified
private key by prepending a DomainKey-Signature header to the message
content.

=head1 EXAMPLE

  dkfilter.out --keyfile=private.key --selector=sydney \
          --domain=example.org 127.0.0.1:10027 127.0.0.1:10028

=head1 SMTPPROX OPTIONS

The children option, defaulting to 16, allows adjusting how many child
processes will be maintained in the service pool. Each child will
kill itself after servicing some random number of messages between
minperchild and maxperchild (100-200 default), after which the
parent will immediately fork another child to pick up its share of
the load. If debugtrace is specified, the prefix will have the PID
appended to it for a separate logfile for each child, which will
capture all the SMTP dialogues that child services. It looks like a
snooper on the client side of the proxy. And if debugtracefile is
defined, it returns its own banner including its PID for debugging
at startup, otherwise it copies the server's banner back to the
client transparently.

=head1 WARNING

While the richness or lack thereof in the SMTP dialect spoken lies
in the hands of the next SMTP server down the chain, this proxy was
not designed to run on the front lines listening for traffic from
the internet; neither its performance characteristics nor its
paranoia were tuned for that role. Rather, it's designed as an
intermediate component, suitable for use as the framework for a
content-scanning proxy for use with Postfix's content-filtering
hooks.

=head1 PERFORMANCE NOTES

This proxy is tuned to some specific assumptions: execing perl is
wickedly expensive, forking perl is fairly expensive, messages will
vary rather widely in size, and memory footprint efficiency is
somewhat more important than CPU utilization. It uses Apache-style
preforking to almost entirely eliminate the need to fork perls,
with controlled child restart to defend against resource leaks in
children; it stores the body of the message in an unlinked file
under /tmp, which should be a tmpfs; this prevents the allocation
overhead associated with large strings (often 2-3x) and ensures that
space will be returned to the OS as soon as it's not needed.

=cut
